# Parse CloudFront logs. For details on the format, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#BasicDistributionFileFormat
# You would typically read these by way of the s3 input plugin.
filter {
  if [type] == "cloudfront" {

    # Drop the field definitions.
    if "#Version:" in [message] or "#Fields:" in [message] {
      drop { }
    }

    # Nobody%20likes%20reading%20urlencoded%text.
    urldecode {
      field => "message"
    }

    # The log lines are tab separated and the docs say \t does not work.
    csv {
      separator => "	"
      source    => "message"

      # No magic.
      autodetect_column_names   => false
      autogenerate_column_names => false
      skip_header               => true

      # What you got?
      columns   => [
        "date",
        "time",
        "cloudfront.edge_location",
        "bytes",
        "clientip",
        "verb",
        "cloudfront.hostname",
        "request",
        "response",
        "referer",
        "useragent",
        "rawquerystring",
        "cookies",
        "cloudfront.edge_result_type",
        "cloudfront.edge_request_id",
        "httphost",
        "protocol",
        "request_bytes",
        "duration",
        "forwarded",
        "ssl_protocol",
        "ssl_cipher",
        "cloudfront.edge_response_result_type",
        "httpversion",
        "cloudfront.fle_status",
        "cloudfront.fle_fields",
        "port",
        "cloudfront.wait_time",
        "cloudfront.edge_detailed_result_type",
        "content_type",
        "content_length",
        "range_start",
        "range_end"
      ]

      convert => {
        "bytes"                => "integer"
        "response"             => "integer"
        "request_butes"        => "integer"
        "duration"             => "float"
        "cloudfront.wait_time" => "float"
        "content_length"       => "integer"
        "range_start"          => "integer"
        "range_end"            => "integer"
      }
    }

    # We need minimal mangling.
    mutate {
      gsub      => [
        "useragent", "\"", ""
      ]
      add_field => { "timestamp" => "%{date} %{time}" }
    }

    # There is only one timezone.
    date {
      timezone     => "UTC"
      locale       => "en"
      match        => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
      remove_field => [ "date", "time", "timestamp" ]
    }

    # Mess with the edge_locatiuon code and do a lookup to the city name.
    # Extract the IATA airport code first (Ex: LHR62-C4)
    grok {
      patterns_dir   => [ "/etc/logstash/patterns" ]
      match          => { "[cloudfront.edge_location]" => "%{CLOUDFRONT_EDGE_LOCATION}" }
      tag_on_failure => []
    }

    # If we have an airport code, do a lookup!
    if [iata] {
      translate {
        field           => "[iata.code]"
        destination     => "[iata.location]"
        dictionary_path => "/path/to/data/iata.yaml"
        fallback        => "Middle of Nowhere"
      }
    }

    # Metadata. Who doesn't love metadata?
    if [clientip] {
      geoip {
        source => "clientip"
        target => "geoip"
      }
    }

    # Sure, why not.
    if [useragent] {
      useragent {
        source => "useragent"
        target => "browser"
      }
    }
  }
}
